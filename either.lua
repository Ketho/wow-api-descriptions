-- API functions that have only a single description on either the main listing or individual page
-- this could also mean the api page doesn't exist yet

local t = {
	["AcceptSpellConfirmationPrompt"] = [=[Confirms a spell confirmation prompt (e.g. bonus loot roll).]=],
	["AcknowledgeAutoAcceptQuest"] = [=[Acknowledges that the currently-offered auto-accept quest has been accepted by the player.]=],
	["ActionBindsItem"] = [=[Confirms this will bind this item to you.]=],
	["ArcheologyGetVisibleBlobID"] = [=[Returns BlobID of a digsite in the current map-zone.]=],
	["AreAccountAchievementsHidden"] = [=[Returns whether account-wide achievements are hidden from other players.]=],
	["AutoLootMailItem"] = [=[Loot all items from mail message.]=],
	["BNGetFriendIndex"] = [=[Returns the index in the friend frame of the given Battle.net friend.]=],
	["BNIsSelf"] = [=[Returns true if the specified presenceID is your own, false otherwise.]=],
	["BNSendVerifiedBattleTagInvite"] = [=[Unit should have been set with [[API BNCheckBattleTagInviteToUnit|BNCheckBattleTagInviteToUnit]] or [[API BNCheckBattleTagInviteToGuildMember|BNCheckBattleTagInviteToGuildMember]].]=],
	["BNSendWhisper"] = [=[Sends a whisper to Battle.net friends.]=],
	["BNSetCustomMessage"] = [=[Sends a broadcast message to your Real ID friends.]=],
	["BNSetFriendNote"] = [=[Sets the Friend Note for a specific Battle.Net friend.]=],
	["BeginTrade"] = [=[Accepts an offer to start trading with another player.]=],
	["BuyGuildBankTab"] = [=[Buys a guild bank tab, without confirmation.]=],
	["C_AccountInfo.GetIDFromBattleNetAccountGUID"] = [=[Converts a battle.net account GUID to battle.net ID.]=],
	["C_AccountInfo.IsGUIDBattleNetAccountType"] = [=[Returns whether a GUID is a batle.net account type.]=],
	["C_AccountInfo.IsGUIDRelatedToLocalAccount"] = [=[Returns whether a GUID is related to the local (self) account.]=],
	["C_AchievementInfo.GetRewardItemID"] = [=[Returns any reward item for an achievement.]=],
	["C_ActionBar.IsHarmfulAction"] = [=[Returns true if the specified action is a harmful one.]=],
	["C_ActionBar.IsHelpfulAction"] = [=[Returns true if the specified action is a helpful one.]=],
	["C_AlliedRaces.ClearAlliedRaceDetailsGiver"] = [=[Clears something to do with the allied races' frame.]=],
	["C_AnimaDiversion.CloseUI"] = [=[Closes the AnimaDiversionFrame.]=],
	["C_AnimaDiversion.GetAnimaDiversionNodes"] = [=[Returns all [[Anima Conductor]] nodes for the player's Covenant.]=],
	["C_AnimaDiversion.GetOriginPosition"] = [=[Locates an [[Anima Conductor]].]=],
	["C_AnimaDiversion.GetTextureKit"] = [=[Names the texture kit applied to the AnimaDiversionFrame.]=],
	["C_AnimaDiversion.OpenAnimaDiversionUI"] = [=[Attempts to open the AnimaDiversionFrame.]=],
	["C_ArtifactUI.GetArtifactArtInfo"] = [=[Returns information about the currently equipped artifact weapon.]=],
	["C_ArtifactUI.GetArtifactInfo"] = [=[Returns information about the currently equipped artifact weapon.]=],
	["C_ArtifactUI.GetArtifactTier"] = [=[Returns the tier number for your artifact at the forge.]=],
	["C_ArtifactUI.GetTotalPurchasedRanks"] = [=[Returns the total number of ranks purchased for an artifact weapon.]=],
	["C_AuctionHouse.GetTimeLeftBandInfo"] = [=[Identifies the breakpoints for describing an auction's remaining duration using time-left bands.]=],
	["C_AuctionHouse.SendBrowseQuery"] = [=[Queries the auction house using search parameters.]=],
	["C_BarberShop.ApplyCustomizationChoices"] = [=[Submits chosen barber shop customizations to the server for application.]=],
	["C_BarberShop.Cancel"] = [=[Dismisses the barber shop UI, cancelling all customizations.]=],
	["C_BarberShop.ClearPreviewChoices"] = [=[Clears all actively previewed customization choices on the character.]=],
	["C_BarberShop.GetCurrentCameraZoom"] = [=[Returns the current camera zoom level.]=],
	["C_BarberShop.GetCurrentCharacterData"] = [=[Returns [BarberShopCharacterData][apidoc:s:barbershopcharacterdata] about the character.]=],
	["C_BarberShop.GetCurrentCost"] = [=[Returns the cost of the currently selected customizations.]=],
	["C_BarberShop.IsViewingAlteredForm"] = [=[Returns true if the player is currently customizing an alternate form.]=],
	["C_BarberShop.PreviewCustomizationChoice"] = [=[Previews a customization choice on the character without selecting it.]=],
	["C_BarberShop.ResetCameraRotation"] = [=[Resets the camera rotation.]=],
	["C_BarberShop.ResetCustomizationChoices"] = [=[Resets all selected customization choices.]=],
	["C_BarberShop.RotateCamera"] = [=[Rotates the camera by the specified number of degrees.]=],
	["C_BarberShop.SetCameraDistanceOffset"] = [=[Sets the distance offset of the camera.]=],
	["C_BarberShop.SetCameraZoomLevel"] = [=[Sets the zoom level of the camera.]=],
	["C_BarberShop.SetCustomizationChoice"] = [=[Selects a customization choice.]=],
	["C_BarberShop.SetModelDressState"] = [=[Controls whether or not the character should be dressed.]=],
	["C_BarberShop.SetSelectedSex"] = [=[Changes the selected gender of the character.]=],
	["C_BarberShop.SetViewingAlteredForm"] = [=[Controls whether the alternate form for a character is being customized.]=],
	["C_BarberShop.SetViewingShapeshiftForm"] = [=[Changes the shapeshift form being customized. Set to nil to revert to customizing the characters' normal form.]=],
	["C_BarberShop.ZoomCamera"] = [=[Zooms the camera by a specifed amount.]=],
	["C_BlackMarket.GetHotItem"] = [=[Returns information about the current "hot item" at the [[Black Market Auction House]].]=],
	["C_BlackMarket.GetItemInfoByIndex"] = [=[Returns information about a specific black market auction.]=],
	["C_BlackMarket.IsViewOnly"] = [=[Returns whether the black market is only viewable and bids are disabled.]=],
	["C_ChallengeMode.GetDungeonScoreRarityColor"] = [=[Returns a color value from the passed in overall season M+ rating.]=],
	["C_ChallengeMode.GetKeystoneLevelRarityColor"] = [=[Returns a color value from the passed in keystone level.]=],
	["C_ChallengeMode.GetOverallDungeonScore"] = [=[Gets the overall season mythic+ rating for the player.]=],
	["C_ChallengeMode.GetSpecificDungeonOverallScoreRarityColor"] = [=[Returns a color value from the passed in mythic+ rating from the combined affix scores for a specific dungeon]=],
	["C_ChallengeMode.GetSpecificDungeonScoreRarityColor"] = [=[Returns a color value from the passed in mythic+ rating for a specific dungeon.]=],
	["C_ChatInfo.SendAddonMessageLogged"] = [=[Sends a message to the hidden addon channel, the messages are logged server side.]=],
	["C_ChromieTime.CloseUI"] = [=[Closes the timewalking campaign selection UI, triggering the `CHROMIE_TIME_CLOSE` event.]=],
	["C_ChromieTime.GetChromieTimeExpansionOption"] = [=[Returns information about a Timewalking Campaign.]=],
	["C_ChromieTime.GetChromieTimeExpansionOptions"] = [=[Returns a table listing all available Timewalking Campaigns.]=],
	["C_ChromieTime.SelectChromieTimeOption"] = [=[Requests that the player be assigned to a specified timewalking expansion campaign.]=],
	["C_Club.AddClubStreamChatChannel"] = [=[Adds a communities channel.]=],
	["C_Club.CreateTicket"] = [=[This is protected and only available to the Blizzard UI. Used for creating a ticket for a community club.]=],
	["C_Club.GetInvitationCandidates"] = [=[Returns a list of players that you can send a request to a Battle.net club. Returns an empty list for Character based clubs]=],
	["C_Club.SendMessage"] = [=[This is a protected function and will not work via addons. Used to send message to Club Stream. ]=],
	["C_CovenantSanctumUI.DepositAnima"] = [=[Deposits [[anima]] to a Covenant Sanctum.]=],
	["C_Covenants.GetActiveCovenantID"] = [=[Returns the CovenantID of the chosen covenant.]=],
	["C_CurrencyInfo.GetCurrencyIDFromLink"] = [=[Converts currency links to IDs.]=],
	["C_CurrencyInfo.GetCurrencyInfoFromLink"] = [=[Returns information about currencies from a link.]=],
	["C_CurrencyInfo.GetCurrencyListLink"] = [=[Get the currencyLink for the specified currency list index.]=],
	["C_CurrencyInfo.PickupCurrency"] = [=[Replaces `PickupCurrency`.]=],
	["C_Cursor.GetCursorItem"] = [=[Returns the item currently dragged by the player.]=],
	["C_DateAndTime.AdjustTimeByMinutes"] = [=[Returns the date after a given amount of minutes.]=],
	["C_DateAndTime.GetSecondsUntilWeeklyReset"] = [=[Returns the number of seconds until the weekly reset.]=],
	["C_EncounterJournal.GetLootInfoByIndex"] = [=[Returns loot info for an encounter or instance.]=],
	["C_FriendList.GetFriendInfoByIndex"] = [=[Retrieves information about a person on your friends list.]=],
	["C_GamePad.ButtonBindingToIndex"] = [=[Converts the name of a keybinding to its assigned gamepad button index. Returns nil if no gamepad button is assigned to the requested keybinding.]=],
	["C_GamePad.ButtonIndexToBinding"] = [=[Returns the name of the keybinding assigned to a specified gamepad button index. Returns nil if no keybinding is assigned to the requested button.]=],
	["C_GamePad.IsEnabled"] = [=[Returns true if gamepad support is enabled on this system.]=],
	["C_GamePad.SetVibration"] = [=[Makes the gamepad vibrate.]=],
	["C_Garrison.GetAvailableMissions"] = [=[Get a list of available follower missions.]=],
	["C_Garrison.GetBasicMissionInfo"] = [=[Returns a table containing information on the requested mission.]=],
	["C_Garrison.GetBuildingInfo"] = [=[Returns a table containing all buiildings for a garrison. Each element contains buildingID,plotID,texPrefix,uiTab]=],
	["C_Garrison.GetFollowerAbilities"] = [=[Get the follower abilities for a given ID.]=],
	["C_Garrison.GetFollowerAbilityAtIndex"] = [=[Returns a table containing information about a single follower ability.]=],
	["C_Garrison.GetFollowerInfo"] = [=[Returns information about a follower.]=],
	["C_Garrison.GetFollowerItems"] = [=[Return information about a follower weapon and armor.]=],
	["C_Garrison.GetGarrisonInfo"] = [=[Returns information for your character's garrison.]=],
	["C_Garrison.GetInProgressMissions"] = [=[Get a list of active follower missions.]=],
	["C_Garrison.GetLandingPageShipmentInfoByContainerID"] = [=[Returns information on Garrison/Class Hall/other shipment in progress.]=],
	["C_Garrison.GetLooseShipments"] = [=[Returns table with information on Garrison/Class Hall/other shipment in progress. Data can be extracted from table using C_Garrison.GetLandingPageShipmentInfoByContainerID.]=],
	["C_Garrison.GetOwnedBuildingInfoAbbrev"] = [=[Returns basic information on garrison buildings.]=],
	["C_Garrison.HasShipyard"] = [=[Returns true if you have a shipyard.]=],
	["C_Garrison.IsUsingPartyGarrison"] = [=[Returns whether your are viewing your party leader's Garrison.]=],
	["C_Garrison.MarkMissionComplete"] = [=[Acknowledges mission completion.]=],
	["C_Garrison.MissionBonusRoll"] = [=[Receives mission loot.]=],
	["C_Garrison.SetUsingPartyGarrison"] = [=[Switches between viewing your party leader's Garrison or your own.]=],
	["C_Garrison.StartMission"] = [=[Starts a mission.]=],
	["C_Heirloom.CanHeirloomUpgradeFromPending"] = [=[Returns true if an heirloom can be upgraded by using an upgrade item]=],
	["C_Heirloom.GetHeirloomInfo"] = [=[Returns information about a heirloom by itemID]=],
	["C_Item.IsDressableItemByID"] = [=[Returns true if the item is an Armor or Weapon type and false for all other items (Necklace, Trinkets, Rings, Consumables, etc.).]=],
	["C_ItemUpgrade.GetItemHyperlink"] = [=[Returns an [[itemLink]] of the anticipated result from applying [[item upgrading]] using the <code>ItemUpgradeFrame</code>.]=],
	["C_ItemUpgrade.GetItemLevelIncrement"] = [=[Returns the proposed item level increment for the item being considered for upgrading.]=],
	["C_ItemUpgrade.GetItemUpgradeEffect"] = [=[Returns the effect of upgrading an item on one of its effects.]=],
	["C_ItemUpgrade.GetNumItemUpgradeEffects"] = [=[Returns the number of item effects affected by upgrading the current item.]=],
	["C_LFGInfo.CanPlayerUseGroupFinder"] = [=[Returns true if the player is allowed to use group finder tools, or false and a reason string if not.]=],
	["C_LFGInfo.CanPlayerUseLFD"] = [=[Returns true if the player is allowed to queue for instanced dungeon content, or false and a reason string if not.]=],
	["C_LFGInfo.CanPlayerUseLFR"] = [=[Returns true if the player is allowed to queue for instanced raid content, or false and a reason string if not.]=],
	["C_LFGInfo.CanPlayerUsePVP"] = [=[Returns true if the player is allowed to queue for instanced PvP content, or false and a reason string if not.]=],
	["C_LFGInfo.CanPlayerUsePremadeGroup"] = [=[Returns true if the player is allowed to use the premade group finder, or false and a reason string if not.]=],
	["C_LFGInfo.GetAllEntriesForCategory"] = [=[Returns any dungeons for a LFG category you're queued up for.]=],
	["C_LFGInfo.HideNameFromUI"] = [=[Returns true if a dungeon name has to be hidden in the UI.]=],
	["C_LFGList.GetActivityInfo"] = [=[Returns information about an activity for premade groups.]=],
	["C_LFGList.GetCategoryInfo"] = [=[Returns information about a specific category.]=],
	["C_LFGList.GetSearchResults"] = [=[Returns a table of search result IDs.]=],
	["C_LFGList.InviteApplicant"] = [=[Invites a queued applicant to your group.]=],
	["C_LFGList.RequestAvailableActivities"] = [=[Signals the server to request that it send the client information about available activities.]=],
	["C_LFGList.UpdateListing"] = [=[Updates information for the players' currently listed group.]=],
	["C_LootHistory.GetItem"] = [=[Returns item details for a loot event]=],
	["C_LootHistory.GetPlayerInfo"] = [=[Returns player details for a loot event]=],
	["C_Map.ClearUserWaypoint"] = [=[Clears the currently assigned user waypoint, if one exists.]=],
	["C_Map.GetMapRectOnMap"] = [=[Returns the map rectangle location for a map on its parent map.]=],
	["C_Map.GetMapWorldSize"] = [=[Returns the size in yards of the area represented by the map.]=],
	["C_Map.GetUserWaypoint"] = [=[Returns the UiMapPoint structure for the currently assigned user waypoint, if one exists.]=],
	["C_Map.GetUserWaypointHyperlink"] = [=[Returns a worldmap hyperlink for the currently assigned user waypoint, if one exists.]=],
	["C_Map.GetUserWaypointPositionForMap"] = [=[Returns the map position for a user waypoint that is placed on a specified map ID.]=],
	["C_Map.HasUserWaypoint"] = [=[Returns true if a user waypoint has been assigned.]=],
	["C_Map.SetUserWaypoint"] = [=[Changes the user-assigned waypoint to the specified location, encoded as a UiMapPoint structure.]=],
	["C_MerchantFrame.IsMerchantItemRefundable"] = [=[Returns if an item is refundable.]=],
	["C_MountJournal.GetDisplayedMountAllCreatureDisplayInfo"] = [=[Returns all display IDs for a mount by index.]=],
	["C_MountJournal.GetDisplayedMountInfo"] = [=[Returns information about the specified mount.]=],
	["C_MountJournal.GetDisplayedMountInfoExtra"] = [=[Returns extra information about the specified mount.]=],
	["C_MountJournal.IsItemMountEquipment"] = [=[Determines if the item is [[mount equipment]] based on its class and subclass.]=],
	["C_MythicPlus.GetSeasonBestAffixScoreInfoForMap"] = [=[Gets the active players best runs by the seasonal tracked affixes as well as their overall score for the current season.]=],
	["C_NamePlate.GetNamePlateForUnit"] = [=[Returns the nameplate for a unit.]=],
	["C_NamePlate.GetNamePlates"] = [=[Returns the currently visible nameplates.]=],
	["C_Navigation.GetDistance"] = [=[Returns the distance in yards from the players current location to the tracked location.]=],
	["C_Navigation.GetFrame"] = [=[Returns the UI frame positioned in the world for displaying the tracked location, if one has been created.]=],
	["C_Navigation.GetTargetState"] = [=[Returns state information about the currently tracked location, such as its occlusion status. See the `NavigationState` enum below.]=],
	["C_Navigation.HasValidScreenPosition"] = [=[Returns true if the currently tracked location can be represented by any screen position. This can presumably return false a tracked location weren't valid for the current map, or if the player is possibly too close to a tracked location.]=],
	["C_Navigation.WasClampedToScreen"] = [=[Returns true if the navigation frame position was clamped due to having been located off-screen. This can indicate that the player may not be facing towards the tracked location.]=],
	["C_PartyInfo.ConfirmConvertToRaid"] = [=[Immediately convert to raid with no regard for potentially destructive actions.]=],
	["C_PartyInfo.ConfirmInviteUnit"] = [=[Immediately invites the named unit to a party, with no regard for potentially destructive actions.]=],
	["C_PartyInfo.ConfirmLeaveParty"] = [=[Immediately leave the party with no regard for potentially destructive actions.]=],
	["C_PartyInfo.ConfirmRequestInviteFromUnit"] = [=[Immediately request an invite into the target party, this is the confirmation function to call after RequestInviteFromUnit, or if you would like to skip the confirmation process.]=],
	["C_PartyInfo.ConvertToRaid"] = [=[Converts a party to a raid.]=],
	["C_PartyInfo.DoCountdown"] = [=[Countdown timer sent to all party members. Has no effect if not in a group/instance. No return values.]=],
	["C_PartyInfo.RequestInviteFromUnit"] = [=[Attempt to request an invite into the target party, requires confirmation in some cases (e.g. there is a party sync in progress).]=],
	["C_PetBattles.AcceptPVPDuel"] = [=[Accepts a pending PvP duel invitation.]=],
	["C_PetBattles.AcceptQueuedPVPMatch"] = [=[Accepts a pending PvP match from the queue.]=],
	["C_PetBattles.CanAcceptQueuedPVPMatch"] = [=[Returns whether the player can currently accept the queued PvP pet battle match.]=],
	["C_PetBattles.CanActivePetSwapOut"] = [=[Returns whether or not the active pet can be swapped out in the pet battle.]=],
	["C_PetBattles.CanPetSwapIn"] = [=[Returns whether or not the pet can swap in to the active position.]=],
	["C_PetBattles.CancelPVPDuel"] = [=[Declines a pending PvP pet battle duel invitation.]=],
	["C_PetBattles.ChangePet"] = [=[Changes the active pet out for a different pet in a pet battle.]=],
	["C_PetBattles.DeclineQueuedPVPMatch"] = [=[Declines a pending PvP match from the queue.]=],
	["C_PetBattles.ForfeitGame"] = [=[Forfeits the current Pet Battle immediately.]=],
	["C_PetBattles.GetAbilityEffectInfo"] = [=[Returns the effect info for a pet's ability.]=],
	["C_PetBattles.GetAbilityInfo"] = [=[Returns ability information for an ability in a slot on a pet that you own.]=],
	["C_PetBattles.GetAbilityInfoByID"] = [=[Returns very detailed information about a specific ability.]=],
	["C_PetBattles.GetAbilityProcTurnIndex"] = [=[Returns the turn index for a specific ability and proc type.]=],
	["C_PetBattles.GetAbilityState"] = [=[Returns information about a pet's ability's current state in the pet battle.]=],
	["C_PetBattles.GetAbilityStateModification"] = [=[Returns the modification state for an ability.]=],
	["C_PetBattles.GetActivePet"] = [=[Returns the index of the active pet for the specified owner in the pet battle.]=],
	["C_PetBattles.GetAllEffectNames"] = [=[Returns the name of an effect parameter for Pet Battles.]=],
	["C_PetBattles.GetAllStates"] = [=[Returns all state IDs.]=],
	["C_PetBattles.GetAttackModifier"] = [=[Returns the modifier for an attack launched by a pet against an enemy pet.]=],
	["C_PetBattles.GetAuraInfo"] = [=[Returns information for an aura in a pet battle.]=],
	["C_PetBattles.GetBattleState"] = [=[Returns the current battle state for the pet battle.]=],
	["C_PetBattles.GetBreedQuality"] = [=[Returns the rarity of a specific pet in the current pet battle.]=],
	["C_PetBattles.GetDisplayID"] = [=[Returns the current displayID of a specific pet in the pet battle.]=],
	["C_PetBattles.GetForfeitPenalty"] = [=[Returns the percentage of current health your pets will lose if you forfeit the battle.]=],
	["C_PetBattles.GetHealth"] = [=[Returns the current health of a specific pet in the current pet battle.]=],
	["C_PetBattles.GetIcon"] = [=[Returns the current icon of a specific pet in the pet battle.]=],
	["C_PetBattles.GetLevel"] = [=[Returns the level of a specific pet in the current pet battle.]=],
	["C_PetBattles.GetMaxHealth"] = [=[Returns the maximum health of a specific pet in the current pet battle.]=],
	["C_PetBattles.GetName"] = [=[Returns the name(s) of a specific pet in the pet battle.]=],
	["C_PetBattles.GetNumAuras"] = [=[Returns the number of active auras affecting the current pet in the pet battle.]=],
	["C_PetBattles.GetNumPets"] = [=[Returns the number of pets that the specified owner has in the pet battle.]=],
	["C_PetBattles.GetPVPMatchmakingInfo"] = [=[Returns status information about the current PvP pet battle matchmaking queue.]=],
	["C_PetBattles.GetPetSpeciesID"] = [=[Returns the species ID of a specific pet in the pet battle.]=],
	["C_PetBattles.GetPetType"] = [=[Returns the current pet type of a specific pet in the pet battle.]=],
	["C_PetBattles.GetPlayerTrapAbility"] = [=[Returns the ability ID for the best trap available to the player in the pet battle.]=],
	["C_PetBattles.GetPower"] = [=[Returns the current Power of a specific pet in the pet battle.]=],
	["C_PetBattles.GetSelectedAction"] = [=[Returns the selected action of a specific pet in the pet battle.]=],
	["C_PetBattles.GetSpeed"] = [=[Returns the current Speed of a specific pet in the pet battle.]=],
	["C_PetBattles.GetStateValue"] = [=[Returns the value of a specific state for a specific pet in a pet battle.]=],
	["C_PetBattles.GetTurnTimeInfo"] = [=[Returns the remaining time and total time for your current turn in a PvP pet battle.]=],
	["C_PetBattles.GetXP"] = [=[Returns the experience values of a specific pet in the current pet battle.]=],
	["C_PetBattles.IsInBattle"] = [=[Returns whether or not there is a pet battle in progress.]=],
	["C_PetBattles.IsPlayerNPC"] = [=[Returns whether or not a pet battle team is controlled by an NPC.]=],
	["C_PetBattles.IsSkipAvailable"] = [=[Returns whether or not you can skip your turn at the current time.]=],
	["C_PetBattles.IsTrapAvailable"] = [=[Returns whether or not you can use a trap at this time.]=],
	["C_PetBattles.IsWaitingOnOpponent"] = [=[Returns whether or not you are waiting on your opponent to decide a course of action in a PvP pet battle.]=],
	["C_PetBattles.IsWildBattle"] = [=[Returns whether or not there is a wild pet battle in progress.]=],
	["C_PetBattles.SetPendingReportBattlePetTarget"] = [=[Starts the process of reporting one of your opponent's battle pets for having a bad name.]=],
	["C_PetBattles.SetPendingReportTargetFromUnit"] = [=[Starts the process of reporting the specified battle pet for having a bad name.]=],
	["C_PetBattles.ShouldShowPetSelect"] = [=[Returns whether or not the UI should show the pet select screen.]=],
	["C_PetBattles.SkipTurn"] = [=[Passes your current turn in the pet battle without using an ability.]=],
	["C_PetBattles.StartPVPDuel"] = [=[Challenges the targeted player to a PvP pet battle duel.]=],
	["C_PetBattles.StartPVPMatchmaking"] = [=[Adds the current player to the PvP matchmaking queue.]=],
	["C_PetBattles.StopPVPMatchmaking"] = [=[Removes the current player from the PvP matchmaking queue.]=],
	["C_PetBattles.UseAbility"] = [=[Uses an ability in the pet battle.]=],
	["C_PetBattles.UseTrap"] = [=[Uses a trap to attempt to catch the opponent's active pet in the pet battle.]=],
	["C_PetJournal.FindPetIDByName"] = [=[Returns pet species and GUID by pet name.]=],
	["C_PetJournal.GetNumCollectedInfo"] = [=[Returns the number of collected battle pets of a particular species.]=],
	["C_PetJournal.GetPetAbilityInfo"] = [=[Returns information about a battle pet ability.]=],
	["C_PetJournal.GetPetAbilityList"] = [=[Returns pet battle abilities available to a particular battle pet species.]=],
	["C_PetJournal.GetPetCooldownByGUID"] = [=[Returns the cooldown associated with summoning a battle pet companion.]=],
	["C_PetJournal.GetPetInfoByItemID"] = [=[Retrieves information about the battle pet species taught by the specified item.]=],
	["C_PetJournal.GetPetLoadOutInfo"] = [=[Returns information about a slot in your battle pet team.]=],
	["C_PetJournal.GetPetSortParameter"] = [=[Returns the index of the currently active sort parameter.]=],
	["C_PetJournal.GetPetTeamAverageLevel"] = [=[Returns the average level of pets in your battle pet team.]=],
	["C_PetJournal.IsFilterChecked"] = [=[Returns true if the selected filter is checked.]=],
	["C_PetJournal.IsFindBattleEnabled"] = [=[Returns whether the player can queue for PvP pet battles.]=],
	["C_PetJournal.IsPetSourceChecked"] = [=[Returns true if the pet source is checked.]=],
	["C_PetJournal.IsPetTypeChecked"] = [=[Returns true if the pet type is checked.]=],
	["C_PetJournal.PetIsCapturable"] = [=[Returns whether a battle pet in your collection is capturable (i.e. a wild pet).]=],
	["C_PetJournal.PetIsHurt"] = [=[Returns whether the specified battle pet is injured and unable to participate in battles.]=],
	["C_PetJournal.PetIsRevoked"] = [=[Returns whether or not the pet is revoked.]=],
	["C_PetJournal.PetIsSlotted"] = [=[Returns whether a battle pet in your collection is part of your current battle pet team.]=],
	["C_PetJournal.PickupPet"] = [=[Places a battle pet onto the mouse cursor.]=],
	["C_PetJournal.SetAbility"] = [=[Selects a battle pet ability to make available in battle.]=],
	["C_PetJournal.SetAllPetSourcesChecked"] = [=[Sets or clears all the pet sources in the filter menu.]=],
	["C_PetJournal.SetAllPetTypesChecked"] = [=[Sets or clears all the pet types in the filter menu.]=],
	["C_PetJournal.SetFilterChecked"] = [=[Sets the filters in the filter menu.]=],
	["C_PetJournal.SetPetLoadOutInfo"] = [=[Places the specified pet into a battle pet slot.]=],
	["C_PetJournal.SetPetSortParameter"] = [=[Changes the battle pet ordering in the pet journal.]=],
	["C_PetJournal.SetPetSourceChecked"] = [=[Sets the pet source in the filter menu.]=],
	["C_PlayerChoice.GetPlayerChoiceInfo"] = [=[Returns information about a quest choice fork.]=],
	["C_PlayerChoice.GetPlayerChoiceOptionInfo"] = [=[Returns information about an offered quest choice option.]=],
	["C_PlayerChoice.GetPlayerChoiceRewardInfo"] = [=[Returns reward info on a quest option.]=],
	["C_PlayerChoice.IsWaitingForPlayerChoiceResponse"] = [=[Returns true if the player has an outstanding player choice that requires a response.]=],
	["C_PlayerChoice.SendPlayerChoiceResponse"] = [=[Selects a quest option to pursue.]=],
	["C_PlayerInfo.CanPlayerEnterChromieTime"] = [=[Returns true if the player is eligible to enter a timewalking campaign.]=],
	["C_PlayerInfo.CanPlayerUseAreaLoot"] = [=[Returns true if the player can use area looting.]=],
	["C_PlayerInfo.GetAlternateFormInfo"] = [=[Returns if the player has an alternate form and if they are currently in that form.]=],
	["C_PlayerInfo.GetContentDifficultyCreatureForPlayer"] = [=[Returns a [RelativeContentDifficulty][apidoc:s:relativecontentdifficulty] indicating how much difficulty the player may have if fighting a given unit.]=],
	["C_PlayerInfo.GetContentDifficultyQuestForPlayer"] = [=[Returns a [RelativeContentDifficulty][apidoc:s:relativecontentdifficulty] indicating how much difficulty the player may have when performing a given quest.]=],
	["C_PlayerInfo.GetPlayerMythicPlusRatingSummary"] = [=[Returns the players mythic+ rating summary which includes the runs they've completed as well as their current season m+ rating]=],
	["C_PlayerInfo.IsPlayerEligibleForNPE"] = [=[Returns true if the player is eligible for the legacy new player experience tutorial, or false and a reason string if not.]=],
	["C_PlayerInfo.IsPlayerEligibleForNPEv2"] = [=[Returns true if the player is eligible for the updated new player experience tutorial, or false and a reasons string if not.]=],
	["C_PlayerInfo.IsPlayerInChromieTime"] = [=[Returns true if the player is actively within a timewalking campaign.]=],
	["C_PlayerInfo.IsPlayerNPERestricted"] = [=[Returns true if the player has new player experience restrictions in place.]=],
	["C_PvP.CanPlayerUseRatedPVPUI"] = [=[Returns true if the player is allowed to use the Rated PvP UI, or false and a reason string if not.]=],
	["C_PvP.GetActiveBrawlInfo"] = [=[Returns active brawl information.]=],
	["C_PvP.GetBattlefieldVehicleInfo"] = [=[Returns battleground vehicle info.]=],
	["C_PvP.GetLevelUpBattlegrounds"] = [=[Returns a list of [LevelUpBattlegroundInfo][apidoc:s:levelupbattlegroundinfo] structures indicating the backgrounds available for leveling.]=],
	["C_PvP.GetScoreInfo"] = [=[Returns PvP score info.]=],
	["C_PvP.IsActiveBattlefield"] = [=[Returns whether you are currently in a battleground/battlefield.]=],
	["C_PvP.IsRatedMap"] = [=[Returns if the map is a rated battleground or arena.]=],
	["C_PvP.IsWarModeDesired"] = [=[Indicates whether the player has opted into [[War Mode]] beginning with ''Battle for Azeroth'', regardless if the player is in an outdoor zone where such PvP is actually possible.]=],
	["C_QuestLine.GetAvailableQuestLines"] = [=[Returns available quest lines on a map.]=],
	["C_QuestLine.RequestQuestLinesForMap"] = [=[Downloads updated information about quest lines ("chains" or "hubs") that might appear as map pins.]=],
	["C_QuestLog.CanAbandonQuest"] = [=[Returns whether the player can abandon a specific quest.]=],
	["C_QuestLog.GetBountiesForMapID"] = [=[Replaces `GetQuestBountyInfoForMapID`. Returns a table of [BountyInfo][apidoc:s:bountyinfo] structures.]=],
	["C_QuestLog.GetBountySetInfoForMapID"] = [=[Returns the bounty set for a specified map ID.]=],
	["C_QuestLog.GetDistanceSqToQuest"] = [=[Returns the distance to a quest.]=],
	["C_QuestLog.GetNumWorldQuestWatches"] = [=[Replaces `GetNumWorldQuestWatches`.]=],
	["C_QuestLog.GetQuestDetailsTheme"] = [=[Returns the visual QuestTheme associated with a given quest.]=],
	["C_QuestLog.GetQuestIDForLogIndex"] = [=[Only returns a questID for actual quests, not headers]=],
	["C_QuestLog.GetQuestIDForQuestWatchIndex"] = [=[Returns the quest ID represented by the given quest watch index.]=],
	["C_QuestLog.GetQuestIDForWorldQuestWatchIndex"] = [=[Returns the quest ID represented by the given quest watch index.]=],
	["C_QuestLog.GetQuestWatchType"] = [=[Returns the [QuestWatchType][apidoc:s:questwatchtype] associated with a given quest.]=],
	["C_QuestLog.GetTitleForLogIndex"] = [=[Returns a valid title for anything that is in the quest log.]=],
	["C_QuestLog.IsAccountQuest"] = [=[Returns true if the specified quest is an account-wide quest.]=],
	["C_QuestLog.IsComplete"] = [=[Returns whether the supplied quest in the quest log is complete.]=],
	["C_QuestLog.IsFailed"] = [=[Returns true if the specified quest has been failed.]=],
	["C_QuestLog.IsOnMap"] = [=[Returns true if the specified quest is on the map, and whether or not it has any local PoIs.]=],
	["C_QuestLog.IsQuestBounty"] = [=[Replaces `IsQuestBounty`.]=],
	["C_QuestLog.IsQuestCalling"] = [=[Returns true if the specified quest is a calling quest.]=],
	["C_QuestLog.IsQuestCriteriaForBounty"] = [=[Replaces `IsQuestCriteriaForBounty`.]=],
	["C_QuestLog.IsQuestInvasion"] = [=[Replaces `IsQuestInvasion`.]=],
	["C_QuestLog.IsQuestReplayable"] = [=[Identifies if a quest is eligible for replay with party members who have not yet completed it.]=],
	["C_QuestLog.IsQuestTask"] = [=[Returns whether a given quest is a task (also known as bonus objectives or world quest).]=],
	["C_QuestLog.IsRepeatableQuest"] = [=[Returns true if the specified quest is a repeatable quest.]=],
	["C_QuestLog.IsWorldQuest"] = [=[Returns true if the specified quest is a world quest.]=],
	["C_QuestLog.QuestCanHaveWarModeBonus"] = [=[Tests whether a quest is eligible for warmode bonuses (e.g. many world quests).]=],
	["C_QuestLog.ReadyForTurnIn"] = [=[Returns true if all criteria for a given quest are complete.]=],
	["C_QuestLog.RequestLoadQuestByID"] = [=[Requests quest data from the server.]=],
	["C_QuestSession.CanStart"] = [=[Indicates the player may request starting [[Party Sync]].]=],
	["C_QuestSession.CanStop"] = [=[Indicates the player may request stopping [[Party Sync]].]=],
	["C_QuestSession.Exists"] = [=[Indiciates [[Party Sync]] is active or requested by a party member.]=],
	["C_QuestSession.GetSessionBeginDetails"] = [=[Identifies the party member requesting [[Party Sync]].]=],
	["C_QuestSession.HasJoined"] = [=[Indiciates [[Party Sync]] is active.]=],
	["C_QuestSession.RequestSessionStart"] = [=[Requests party members to begin [[Party Sync]] if permissible.]=],
	["C_QuestSession.RequestSessionStop"] = [=[Stops [[Party Sync]] if permissible.]=],
	["C_QuestSession.SendSessionBeginResponse"] = [=[Consents to activating [[Party Sync]] following a request by another party member.]=],
	["C_ReportSystem.SetPendingReportTarget"] = [=[Populates the reporting window with details about a target player.]=],
	["C_Reputation.RequestFactionParagonPreloadRewardData"] = [=[Queries the server to pre-load Paragon reward data.]=],
	["C_Social.TwitterCheckStatus"] = [=[Not allowed to be called by addons.]=],
	["C_Social.TwitterConnect"] = [=[Not allowed to be called by addons.]=],
	["C_Social.TwitterDisconnect"] = [=[Not allowed to be called by addons.]=],
	["C_SocialQueue.GetGroupInfo"] = [=[Retrieves information about a group in social queue.]=],
	["C_SpecializationInfo.CanPlayerUsePVPTalentUI"] = [=[Returns true if the player is allowed to use the PvP talent UI, or false and a reason string if not.]=],
	["C_SpecializationInfo.CanPlayerUseTalentSpecUI"] = [=[Returns true if the player is allowed to use the specialization UI, or false and a reason string if not.]=],
	["C_SpecializationInfo.CanPlayerUseTalentUI"] = [=[Returns true if the player is allowed to use the talent UI, or false and a reason string if not.]=],
	["C_SpecializationInfo.IsInitialized"] = [=[Returns whether player talent specialization info has been initialized.]=],
	["C_Spell.RequestLoadSpellData"] = [=[Asynchronously downloads spell information to the game client, making the full details available for subsequent calls to {{api|GetSpellInfo(spellId)}}.]=],
	["C_SpellBook.GetCurrentLevelSpells"] = [=[Returns the new spells that will become available for a specific level.]=],
	["C_SummonInfo.GetSummonReason"] = [=[Returns the reason for a summon.]=],
	["C_SummonInfo.IsSummonSkippingStartExperience"] = [=[Returns true if the summon will take the player out of a confined starting zone.]=],
	["C_SuperTrack.GetHighestPrioritySuperTrackingType"] = [=[Returns the type of the location currently being tracked as the highest priority, if one exists.]=],
	["C_SuperTrack.GetSuperTrackedQuestID"] = [=[Returns the quest ID currently being tracked, if set. Replaces `GetSuperTrackedQuestID`.]=],
	["C_SuperTrack.IsSuperTrackingAnything"] = [=[Returns true if the location of any point is actively being tracked.]=],
	["C_SuperTrack.IsSuperTrackingCorpse"] = [=[Returns true if the current location being tracked is your own corpse.]=],
	["C_SuperTrack.IsSuperTrackingQuest"] = [=[Returns true if the current location being tracked is a quest indicator.]=],
	["C_SuperTrack.IsSuperTrackingUserWaypoint"] = [=[Returns true if the current location being tracked is a user-defined waypoint, as set via the `C_Map` API.]=],
	["C_SuperTrack.SetSuperTrackedQuestID"] = [=[Changes the quest ID actively being tracked. Replaces `SetSuperTrackedQuestID`.]=],
	["C_SuperTrack.SetSuperTrackedUserWaypoint"] = [=[Controls whether or not a user waypoint should be tracked. Set to true if the user waypoint should be tracked, or false if not.]=],
	["C_System.GetFrameStack"] = [=[Returns an array of all UI objects under the mouse cursor, as would be exposed through the frame stack tooltip. The returned table is ordered from highest object level to lowest.]=],
	["C_TTSSettings.GetVoiceOptionID"] = [=[Get the user's preferred text to speech voices.]=],
	["C_TaskQuest.GetQuestTimeLeftSeconds"] = [=[Returns the time left for a quest.]=],
	["C_TaskQuest.GetQuestsForPlayerByMapID"] = [=[Locates world quests, follower quests and bonus objectives on a map.]=],
	["C_TaxiMap.GetAllTaxiNodes"] = [=[Returns information on taxi nodes at the current flight master.]=],
	["C_TaxiMap.GetTaxiNodesForMap"] = [=[Returns information on taxi nodes for a given map, without considering the current flight master.]=],
	["C_TaxiMap.ShouldMapShowTaxiNodes"] = [=[Returns whether taxi nodes should be shown on a map.]=],
	["C_Timer.NewTicker"] = [=[Runs callback multiple times iterating every given duration. (Cancelable)]=],
	["C_Timer.NewTimer"] = [=[Runs callback after given duration. (Cancelable)]=],
	["C_ToyBoxInfo.ClearFanfare"] = [=[Clears a fanfare for a toy.]=],
	["C_ToyBoxInfo.NeedsFanfare"] = [=[Returns whether a toy needs a fanfare.]=],
	["C_TradeSkillUI.GetCategories"] = [=[Returns a table of category IDs for the currently opened trade skill.]=],
	["C_TradeSkillUI.GetCategoryInfo"] = [=[Returns information for a tradeskill category.]=],
	["C_TradeSkillUI.GetRecipeCooldown"] = [=[Returns the number of seconds left for a skill to cooldown.]=],
	["C_TradeSkillUI.IsTradeSkillReady"] = [=[Checks if the Trade Skill UI is open for a profession.]=],
	["C_TradeSkillUI.OpenTradeSkill"] = [=[Opens a tradeskill window.]=],
	["C_TradeSkillUI.SetOnlyShowMakeableRecipes"] = [=[Controls whether only recipes you have the reagents to craft are shown.]=],
	["C_TradeSkillUI.StopRecipeRepeat"] = [=[Stops creating additional queued items.]=],
	["C_Transmog.GetSlotInfo"] = [=[Returns info for a transmog slot.]=],
	["C_Transmog.IsSlotBeingCollapsed"] = [=[Returns true if the only pending for the location's slot is a ToggleOff for the secondary appearance.]=],
	["C_Transmog.SetPending"] = [=[Applies a pending transmog choice to the given TransmogLocation slot.]=],
	["C_TransmogCollection.GetAppearanceInfoBySource"] = [=[Returns information about the appearance tied to the given sourceID]=],
	["C_TransmogCollection.GetAppearanceSourceInfo"] = [=[Returns appearance info for a transmog source.]=],
	["C_TransmogCollection.GetAppearanceSources"] = [=[Returns the sources for an appearance.]=],
	["C_TransmogCollection.GetCategoryAppearances"] = [=[Returns all appearances for a category. This is filtered by the [[Class_proficiencies|class proficiency]].]=],
	["C_TransmogCollection.GetCategoryInfo"] = [=[Returns wardrobe category info.]=],
	["C_TransmogCollection.GetIllusions"] = [=[Returns transmoggable enchants for the appearances tab.]=],
	["C_TransmogCollection.GetItemInfo"] = [=[Returns appearance info for an item.]=],
	["C_TransmogCollection.GetNumMaxOutfits"] = [=[Returns the maximum number of Transmogrification outfits that can be saved by the player.]=],
	["C_TransmogCollection.GetSourceInfo"] = [=[Returns appearance source info.]=],
	["C_TransmogSets.GetAllSets"] = [=[Returns all transmog sets.]=],
	["C_TransmogSets.GetSourcesForSlot"] = [=[Returns sources for a transmog set's slot. Only returns valid data for the current class ([[Class_proficiencies|proficiency]]).]=],
	["C_UI.DoesAnyDisplayHaveNotch"] = [=[True if any display attached has a notch. This does not mean the current view intersects the notch.]=],
	["C_UI.GetTopLeftNotchSafeRegion"] = [=[Region of screen left of screen notch. Zeros if no notch.]=],
	["C_UI.GetTopRightNotchSafeRegion"] = [=[Region of screen right of screen notch. Zeros if no notch.]=],
	["C_UI.ShouldUIParentAvoidNotch"] = [=[UIParent will shift down to avoid notch if true. This does not mean there is a notch.]=],
	["C_UIWidgetManager.GetDiscreteProgressStepsVisualizationInfo"] = [=[The '''DiscreteProgressSteps''' UI Widget is used for the [[Eye of the Jailer (mechanic)|Eye of the Jailer]] display while in the [[Maw]].]=],
	["C_UserFeedback.SubmitBug"] = [=[Replaces `GMSubmitBug`.]=],
	["C_UserFeedback.SubmitSuggestion"] = [=[Replaces `GMSubmitSuggestion`.]=],
	["C_VoiceChat.SpeakText"] = [=[Reads text to speech.]=],
	["C_ZoneAbility.GetActiveAbilities"] = [=[Returns an array of abilities active within the current zone.]=],
	["CalculateStringEditDistance"] = [=[Returns [https://en.wikipedia.org/wiki/Levenshtein_distance Levenshtein] distance.]=],
	["CanComplainInboxItem"] = [=[Determines if we should show the ΓÇ£report spamΓÇ¥ button on a mail item.]=],
	["CanDualWield"] = [=[Returns whether the player can [[Dual wield]] weapons.]=],
	["CanEditGuildEvent"] = [=[Returns true if you are allowed to edit guild events (in the calendar).]=],
	["CanEditGuildInfo"] = [=[Returns true if you are allowed to edit the guild info.]=],
	["CanEditPublicNote"] = [=[Returns true if you are allowed to edit a guild member's public note.]=],
	["CanEjectPassengerFromSeat"] = [=[Returns 1 if the player can eject a passenger from a seat.]=],
	["CanExitVehicle"] = [=[Returns 1 if the player can be exit the Vehicle.]=],
	["CanGuildRemove"] = [=[Returns true if you are allowed to remove a guild member.]=],
	["CanHearthAndResurrectFromArea"] = [=[Returns whether you can currently be resurrected and teleported out of the world PvP zone.]=],
	["CanItemBeSocketedToArtifact"] = [=[Returns 1 if item could be added to the [[API SetSelectedArtifact|selected]] artifact.]=],
	["CanPartyLFGBackfill"] = [=[Returns whether the party is eligible to recruit additional members from the LFG pool.]=],
	["CanSignPetition"] = [=[Returns nil if the player cannot sign the current petition.]=],
	["CanSolveArtifact"] = [=[Returns true if artifact can be solved.]=],
	["CanSwitchVehicleSeats"] = [=[Returns 1 if the player can Switch Seats in the Vehicle.]=],
	["CanViewGuildRecipes"] = [=[Checks if the player can view specific guild recipes.]=],
	["CanWithdrawGuildBankMoney"] = [=[Boolean, true if player is permitted to withdraw funds. No bank proximity required.]=],
	["CancelEmote"] = [=[Stops an active emote, e.g. when closing the map.]=],
	["CancelTradeAccept"] = [=[Cancels the trade attempt which required an accept.]=],
	["CastShapeshiftForm"] = [=[Casts a shapeshift ability.]=],
	["ChatFrame_AddChannel"] = [=[Activate channel in chatFrame.]=],
	["ChatFrame_AddMessageEventFilter"] = [=[Add a chat message filtering function.]=],
	["ChatFrame_GetMessageEventFilters"] = [=[Retreive the list of chat message filtering functions.]=],
	["ChatFrame_OnHyperlinkShow"] = [=[Called when the user clicks on a chatlink.]=],
	["ChatFrame_RemoveMessageEventFilter"] = [=[Unregister a chat message filtering function.]=],
	["CheckBinderDist"] = [=[Check whether the player is close enough to interact with the Hearthstone binder.]=],
	["CheckSpiritHealerDist"] = [=[Returns true if you are in range with spirit healer while dead.]=],
	["CheckTalentMasterDist"] = [=[Returns nil if the player is too far away from the talent master to use the talent methods.]=],
	["ClearAchievementComparisonUnit"] = [=[Remove the unit being compared.]=],
	["ClearInspectPlayer"] = [=[Reset inspect data once finished with it.]=],
	["ClearRaidMarker"] = [=[Removes a raid marker from the world.]=],
	["ClickSocketButton"] = [=[If the cursor is currently holding a gem, tentatively insert it into the socket.]=],
	["ClickTradeButton"] = [=[Equivalent of a mouseclick on the trade window buttons [1-7].]=],
	["CloseGuildBankFrame"] = [=[Closes the guild bank frame.]=],
	["CloseLoot"] = [=[Close the loot window.]=],
	["CloseQuest"] = [=[Closes the shown quest.]=],
	["CollapseAllFactionHeaders"] = [=[Collapse all faction header rows.]=],
	["CollapseQuestHeader"] = [=[Collapses a quest header.]=],
	["ComplainInboxItem"] = [=[Complains about a particular mail item.]=],
	["CompleteLFGRoleCheck"] = [=[Returns true if the role check was successful.]=],
	["ConfirmBindOnUse"] = [=[Accepts the confirmation to bind an item after attempting to loot a Bind on Pickup item (BoP) or attempting to equip a Bind on Equip item (BoE).]=],
	["ConfirmBinder"] = [=[Confirm the request to set the binding of the player's Hearthstone.]=],
	["ConfirmOnUse"] = [=[Confirms you want to use the item.]=],
	["ConfirmTalentWipe"] = [=[Confirms freeing all talent points.]=],
	["ConsoleAddMessage"] = [=[Prints a message to the console window.]=],
	["ContainerIDToInventoryID"] = [=[ bagID = ContainerIDToInventoryID(containerID)]=],
	["CopyToClipboard"] = [=[Copies text to the clipboard.]=],
	["CursorHasMacro"] = [=[Returns 1 if the cursor is currently dragging a macro.]=],
	["CursorHasMoney"] = [=[Returns true if the cursor currently holds money.]=],
	["CursorHasSpell"] = [=[Returns true if the cursor currently holds a spell.]=],
	["DeclineChannelInvite"] = [=[Declines an invitation to join a specific chat channel.]=],
	["DeclineGroup"] = [=[Decline the invitation to a party.]=],
	["DeclineName"] = [=[Returns suggested declensions for a German or Russian name.]=],
	["DeclineSpellConfirmationPrompt"] = [=[Declines a spell confirmation prompt (e.g. bonus loot roll).]=],
	["DemoteAssistant"] = [=[Demotes player from assistant status. Requires raid leadership.]=],
	["DepositGuildBankMoney"] = [=[Deposits "money" amount in copper.]=],
	["DetectWowMouse"] = [=[Attempts to detect the world of warcraft MMO mouse.]=],
	["DisableSpellAutocast"] = [=[Disables autocasting for a pet spell.]=],
	["DoesSpellExist"] = [=[This function returns true if the player character knows the spell.]=],
	["DoesTemplateExist"] = [=[Returns if a virtual frame template exists.]=],
	["DumpMovementCapture"] = [=[Used in the protected Commentator UI.]=],
	["EJ_ClearSearch"] = [=[Clears the encounter journal search results.]=],
	["EJ_EndSearch"] = [=[Ends any active encounter journal search.]=],
	["EJ_GetContentTuningID"] = [=[Returns the currently selected content tuning ID for BFA instances.]=],
	["EJ_GetCreatureInfo"] = [=[Returns encounter boss info.]=],
	["EJ_GetCurrentTier"] = [=[Returns the currently active encounter journal tier index.]=],
	["EJ_GetDifficulty"] = [=[Returns the currently viewed difficulty in the journal.]=],
	["EJ_GetEncounterInfo"] = [=[Returns encounter info from the journal.]=],
	["EJ_GetEncounterInfoByIndex"] = [=[idem]=],
	["EJ_GetInstanceByIndex"] = [=[Returns instance info for the Encounter Journal.]=],
	["EJ_GetInstanceForMap"] = [=[Returns any corresponding instance ID for a UiMapID.]=],
	["EJ_GetInstanceInfo"] = [=[Returns instance info for the Encounter Journal.]=],
	["EJ_GetInvTypeSortOrder"] = [=[Returns the sort order for an inventory type.]=],
	["EJ_GetLootFilter"] = [=[Returns the currently used loot filter.]=],
	["EJ_GetMapEncounter"] = [=[Returns boss pin locations on instance maps.]=],
	["EJ_GetNumEncountersForLootByIndex"] = [=[Returns the amount of encounters that drop the same loot item.]=],
	["EJ_GetNumLoot"] = [=[Returns the amount of loot for the currently selected instance or encounter.]=],
	["EJ_GetNumSearchResults"] = [=[Returns the number of search results for the Encounter Journal.]=],
	["EJ_GetNumTiers"] = [=[Returns the number of valid encounter journal tier indices.]=],
	["EJ_GetSearchProgress"] = [=[Returns the search bar's progress ratio.]=],
	["EJ_GetSearchResult"] = [=[Returns search results for the Encounter Journal.]=],
	["EJ_GetSearchSize"] = [=[Returns the amount of Encounter Journal objects to search through.]=],
	["EJ_GetSectionPath"] = [=[Returns the parent Section ID if available.]=],
	["EJ_GetTierInfo"] = [=[Get some information about the encounter journal tier for index.]=],
	["EJ_HandleLinkPath"] = [=[Returns the supplementary instance and encounter ID for an encounter or section ID.]=],
	["EJ_InstanceIsRaid"] = [=[Returns whether the selected instance is a raid.]=],
	["EJ_IsLootListOutOfDate"] = [=[Returns whether the loot list is out of date in relation to any filters when getting new loot data.]=],
	["EJ_IsSearchFinished"] = [=[Returns whether the current search has finished.]=],
	["EJ_IsValidInstanceDifficulty"] = [=[Returns whether the difficultyID is valid for use in the journal.]=],
	["EJ_ResetLootFilter"] = [=[Clears any current loot filter in the journal.]=],
	["EJ_SelectEncounter"] = [=[Selects an encounter for the Encounter Journal API state.]=],
	["EJ_SelectInstance"] = [=[Selects an instance for the Encounter Journal API state.]=],
	["EJ_SelectTier"] = [=[Selects a tier for the Encounter Journal API state.]=],
	["EJ_SetDifficulty"] = [=[Sets the encounter difficulty shown in the Encounter Journal.]=],
	["EJ_SetLootFilter"] = [=[Sets the loot filter for a specialization.]=],
	["EJ_SetSearch"] = [=[Starts a search in the journal.]=],
	["EjectPassengerFromSeat"] = [=[Ejects a passenger from a seat.]=],
	["EnableSpellAutocast"] = [=[Enables autocasting for a pet spell.]=],
	["EndBoundTradeable"] = [=[Confirms this will make this item non-tradeable.]=],
	["EndRefund"] = [=[Confirms this will make this item non-refundable.]=],
	["EquipmentManager_UnpackLocation"] = [=[Unpacks a location integer to determine the actual inventory location.]=],
	["ExpandAllFactionHeaders"] = [=[Expand all faction header rows.]=],
	["FlyoutHasSpell"] = [=[Returns whether a flyout contains a specific spell.]=],
	["ForceLogout"] = [=[Logs the player out immediately, even if outside a resting zone.]=],
	["FrameXML_Debug"] = [=[Sets FrameXML logging state which is output to "/WoW Folder/Logs/FrameXML.log".]=],
	["GMRequestPlayerInfo"] = [=[ GMRequestPlayerInfo()]=],
	["GameMovieFinished"] = [=[Ends the movie.]=],
	["GetAchievementCriteriaInfoByID"] = [=[Returns achievement criteria info by criteriaIndex.]=],
	["GetAchievementNumRewards"] = [=[Returns the number of rewards the requested achievement has.]=],
	["GetAchievementReward"] = [=[Returns information about a reward item by rewardIndex.]=],
	["GetActionLossOfControlCooldown"] = [=[Returns information about a loss-of-control cooldown affecting an action.]=],
	["GetActiveLevel"] = [=[Gets the level of an active quest (only available after QUEST_GREETING event).]=],
	["GetActiveTitle"] = [=[Gets the title of an active quest (only available after QUEST_GREETING event).]=],
	["GetAddOnEnableState"] = [=[Get the enabled state of an addon for a character]=],
	["GetAddOnMemoryUsage"] = [=[Query an addon's memory use (in K, precision to 1 byte) - This returns a cached value calculated by UpdateAddOnMemoryUsage().]=],
	["GetAddOnOptionalDependencies"] = [=[Returns a list of optional dependencies.]=],
	["GetAllowLowLevelRaid"] = [=[Returns whether joining low-level raids is enabled for the current character.]=],
	["GetAutoCompleteRealms"] = [=[Returns a table of realm names for auto-completion.]=],
	["GetAvailableLevel"] = [=[Gets the level of an available quest (only available after QUEST_GREETING event).]=],
	["GetAvailableLocaleInfo"] = [=[Returns the available locales as a table.]=],
	["GetAvailableLocales"] = [=[Returns the available locale strings.]=],
	["GetAvailableTitle"] = [=[Gets the title of an available quest (only available after QUEST_GREETING event).]=],
	["GetBattlefieldArenaFaction"] = [=[Returns the faction played during a cross faction battleground.]=],
	["GetBattlefieldMapIconScale"] = [=[Scale of the landmark icons on the battlefield minimap.]=],
	["GetBattlegroundPoints"] = [=[[NYI] Returns battlegrounds points earned by a team.]=],
	["GetBestFlexRaidChoice"] = [=[Returns the dungeon ID of the most appropriate Flex Raid instance for the player.]=],
	["GetBindingByKey"] = [=[Returns the binding action performed when the specified key combination is triggered.]=],
	["GetBuybackItemLink"] = [=[Returns an [[itemLink]] for the buyback item.]=],
	["GetClassColor"] = [=[Returns a class color from RAID_CLASS_COLORS.]=],
	["GetClickFrame"] = [=[Returns the frame registered with the given object name.]=],
	["GetCoinIcon"] = [=[ texturePath = GetCoinIcon(amount)]=],
	["GetComparisonAchievementPoints"] = [=[Returns the total number of achievement points the comparison unit has earned.]=],
	["GetComparisonCategoryNumAchievements"] = [=[Returns a number of achievements in a category for the comparison player.]=],
	["GetContainerFreeSlots"] = [=[Populates a table with references to unused slots inside a [[Bag|container]].]=],
	["GetContainerItemCooldown"] = [=[Returns cooldown information for an item in your inventory]=],
	["GetCorpseRecoveryDelay"] = [=[Time left before a player can accept a resurrection.]=],
	["GetCorruption"] = [=[Tracks the extent to which a player is wearing items touched by [[N'Zoth]]'s influence.]=],
	["GetCorruptionResistance"] = [=[Tracks how much the player has offset their exposure to dangers that result from wearing items touched by [[N'Zoth]]'s influence.]=],
	["GetCurrentGuildBankTab"] = [=[Integer of selected tab, >= 1.]=],
	["GetCurrentKeyBoardFocus"] = [=[Returns the [editbox] widget currently handling keyboard events.]=],
	["GetCurrentLevelFeatures"] = [=[For Level Up Display]=],
	["GetCurrentRegion"] = [=[Returns a numeric ID representing the region the player is currently logged into.]=],
	["GetCurrentRegionName"] = [=[Returns the name of the current region, as determined by the existing `GetCurrentRegion()` function.]=],
	["GetCursorDelta"] = [=[Returns the distance that the cursor has moved since the last frame.]=],
	["GetDailyQuestsCompleted"] = [=[Returns the current number of daily quests completed today.]=],
	["GetDeathRecapLink"] = [=[Returns a chat link for a specific death.]=],
	["GetDefaultScale"] = [=[Returns the default UI scaling value for the current screen size.]=],
	["GetEquipmentNameFromSpell"] = [=[returns a garrison equipment for a spell.]=],
	["GetEventCPUUsage"] = [=[Returns the time used and number of times the specified event has been triggered. If 'event' is omitted, the time and count will be totals across all events.]=],
	["GetExistingSocketInfo"] = [=[Returns information about the existing gem in the socket.]=],
	["GetExistingSocketLink"] = [=[Returns an item link for the existing gem in the socket.]=],
	["GetExpansionDisplayInfo"] = [=[Returns the logo and banner textures for an expansion id.]=],
	["GetExtraBarIndex"] = [=[Returns the action bar page containing the extra bar/button.]=],
	["GetFactionInfoByID"] = [=[Gets details for a specific faction by factionID.]=],
	["GetFlyoutInfo"] = [=[Describes an action bar flyout.]=],
	["GetFlyoutSlotInfo"] = [=[Describes an action bar flyout slot.]=],
	["GetFollowerTypeIDFromSpell"] = [=[Returns the Garrison expansion type.]=],
	["GetFontInfo"] = [=[Returns a structured table of information about the given font object.]=],
	["GetFunctionCPUUsage"] = [=[Returns the time used and number of times the specified function was called. If 'includeSubroutines' is true or omitted, the time includes both the time spent in the function and subroutines called by the function. If it is false, then time is only the time actually spent by the code in the function itself.]=],
	["GetGuildBankTabCost"] = [=[Integer OR nil - cost in copper OR no tabs available to buy.]=],
	["GetGuildBankText"] = [=[Returns info text for a tab.]=],
	["GetGuildBankWithdrawMoney"] = [=[Returns the amount of money the player is allowed to withdraw from the guild bank.]=],
	["GetGuildCharterCost"] = [=[Returns the cost of purchasing a guild charter.]=],
	["GetGuildEventInfo"] = [=[Returns the event information.]=],
	["GetGuildInfoText"] = [=[Returns the persistant Guild Information data.]=],
	["GetGuildRecipeInfoPostQuery"] = [=[This function returns information about the last tradeskill you were looking at when you clicked "View Crafters" on a guild listing.]=],
	["GetGuildRecipeMember"] = [=[Renders the name and online status of a guild member having a certain recipe.]=],
	["GetGuildRosterLargestAchievementPoints"] = [=[Returns max achievements points.]=],
	["GetHaste"] = [=[Returns the player's haste percentage.]=],
	["GetHitModifier"] = [=[Returns the amount of Melee Hit %, not from Melee Hit Rating, that your character has.]=],
	["GetHomePartyInfo"] = [=[Returns names of characters in your home (non-instance) party.]=],
	["GetInspectArenaData"] = [=[Returns the inspected unit's rated PvP stats.]=],
	["GetInstanceBootTimeRemaining"] = [=[Gets the time in seconds after which the player will be ejected from an instance.]=],
	["GetInviteConfirmationInfo"] = [=[Retrieves information about a player that could be invited.]=],
	["GetItemGem"] = [=[Returns the gem for a socketed equipment item.]=],
	["GetItemSpecInfo"] = [=[Returns which specializations an item is useful for.]=],
	["GetLFGDungeonEncounterInfo"] = [=[Returns info about a specific encounter in an LFG/RF dungeon.]=],
	["GetLFGDungeonNumEncounters"] = [=[Returns the number of encounters and number of completed encounters for a specified dungeon ID.]=],
	["GetLFGProposal"] = [=[Returns information about the current LFD group invite.]=],
	["GetLFGProposalMember"] = [=[Returns info about the players in the LFG proposal.]=],
	["GetLFGRandomDungeonInfo"] = [=[Returns information about a random dungeon queue.]=],
	["GetLFGRoleUpdateBattlegroundInfo"] = [=[Returns the name of the battleground queue triggering a role check.]=],
	["GetLFGRoleUpdateSlot"] = [=[Returns the objectives you are currently flagged to as LFG.]=],
	["GetLFRChoiceOrder"] = [=[Seems to be for used ordering the LFR list.]=],
	["GetLatestCompletedAchievements"] = [=[Returns the ID's of the last 5 completed Achievements.]=],
	["GetLatestCompletedComparisonAchievements"] = [=[Returns a list of the latest updated achievements for the comparison player.]=],
	["GetLatestUpdatedComparisonStats"] = [=[Returns a list of the latest updated statistics for the comparison player.]=],
	["GetLatestUpdatedStats"] = [=[Returns the ID's of the last 5 updated Statistics.]=],
	["GetLifesteal"] = [=[Returns the player's Lifesteal percentage.]=],
	["GetLootInfo"] = [=[Returns a table with all of the loot info for the current loot window.]=],
	["GetLootRollItemInfo"] = [=[Returns information about the loot event with rollID.]=],
	["GetLootRollItemLink"] = [=[Retrieves the [[itemLink]] of an item being rolled on.]=],
	["GetLootSlotType"] = [=[Returns an integer loot type for a given loot slot.]=],
	["GetLootSpecialization"] = [=[Returns the player's current loot specialization.]=],
	["GetMacroIcons"] = [=[Returns an array of available macro texture paths (but not icons of items).]=],
	["GetMacroItemIcons"] = [=[Returns an array of available macro texture paths (icons of items).]=],
	["GetMacroSpell"] = [=[Returns information about the spell a given macro is set to cast. ]=],
	["GetMaxLevelForExpansionLevel"] = [=[Maps an expansion level to a maximum character level for that expansion.]=],
	["GetMaxLevelForLatestExpansion"] = [=[Returns the highest reachable character level for the latest expansion.]=],
	["GetMaxLevelForPlayerExpansion"] = [=[Returns the highest reachable character level for the players' owned expansion level.]=],
	["GetMeleeHaste"] = [=[Returns player's Melee attack haste.]=],
	["GetModifiedClick"] = [=[Returns the modifier key assigned to the given action.]=],
	["GetNegativeCorruptionEffectInfo"] = [=[Produces a table describing all the harmful consequences of wearing [[Corrupted item|corrupted gear]] without resistance.]=],
	["GetNewSocketInfo"] = [=[Returns information about the new (tentative) gem in the socket.]=],
	["GetNewSocketLink"] = [=[Returns an item link for the new (tentative) gem in the socket.]=],
	["GetNormalizedRealmName"] = [=[Returns the name of the server, but omitting spaces and hyphens.]=],
	["GetNumBattlefieldFlagPositions"] = [=[Get the number of flag positions available from GetBattlefieldFlagPosition().]=],
	["GetNumBattlegroundTypes"] = [=[Returns the number of battleground types.]=],
	["GetNumBuybackItems"] = [=[Returns number of items available for buyback.]=],
	["GetNumDeclensionSets"] = [=[Returns the number of suggested declension sets for a German or Russian name.]=],
	["GetNumDisplayChannels"] = [=[ channelCount = GetNumDisplayChannels()]=],
	["GetNumFlexRaidDungeons"] = [=[Returns the number of available [[Flexible Raid]] instances.]=],
	["GetNumFrames"] = [=[Get the current number of Frame (and derivative) objects.]=],
	["GetNumGuildBankMoneyTransactions"] = [=[Returns number of money log entries.]=],
	["GetNumGuildBankTabs"] = [=[Integer count of bought tabs, >= 0. No bank proximity required.]=],
	["GetNumGuildBankTransactions"] = [=[Returns number of log transactions for tab "tab".]=],
	["GetNumGuildEvents"] = [=[Returns the number of guild events.]=],
	["GetNumGuildTradeSkill"] = [=[Returns the number of tradeskills available to the guild UI.]=],
	["GetNumQuestLogRewardSpells"] = [=[Returns the number of spell rewards for the current selected quest.]=],
	["GetNumRFDungeons"] = [=[Returns the number of available Raid Finder dungeons.]=],
	["GetNumRandomDungeons"] = [=[Returns the number of specific dungeons that can be queued for.]=],
	["GetNumRewardCurrencies"] = [=[Returns the number of currency rewards for the quest currently being viewed in the quest log or quest info frame.]=],
	["GetNumRoutes"] = [=[Gets the number of hops between current-slot and slot.]=],
	["GetNumSavedWorldBosses"] = [=[Returns the number of [[world boss]]es the player currently cannot receive loot from.]=],
	["GetNumShapeshiftForms"] = [=[Returns the number of shapeshift buttons (stances for Warriors, auras for Paladins, forms for Druids, etc) the player currently has.  ]=],
	["GetNumWatchedTokens"] = [=[Returns the number of currently watched currencies.]=],
	["GetNumWorldPVPAreas"] = [=[Returns the number of world PvP zones available.]=],
	["GetOSLocale"] = [=[Returns the locale of the Operating System.]=],
	["GetObjectIconTextureCoords"] = [=[Returns texture coordinates of an object icon.]=],
	["GetObjectiveText"] = [=[Gets the objective of the current quest.]=],
	["GetPVPDesired"] = [=[Returns whether the player has permanently turned on their PvP flag.]=],
	["GetPVPRoles"] = [=[Returns which roles the player is willing to perform in PvP battlegrounds.]=],
	["GetPartyLFGBackfillInfo"] = [=[Returns information about the dungeon for which you may currently recruit additional members from the LFG pool.]=],
	["GetPersonalRatedInfo"] = [=[Returns information about the player's personal PvP rating in a specific bracket.]=],
	["GetPetActionsUsable"] = [=[Returns a value indicating if the player's pet's actions can be used at this time.]=],
	["GetPetIcon"] = [=[Returns the path to the texture to use as the icon for the player's pet.]=],
	["GetPetTimeRemaining"] = [=[Returns in milliseconds about some timeout for the player's pet.]=],
	["GetPetitionNameInfo"] = [=[Retrieves information about a signature on the petition.]=],
	["GetPhysicalScreenSize"] = [=[Returns physical screen size of game.]=],
	["GetPowerRegen"] = [=[Returns normal and combat power regeneration rates.]=],
	["GetPreviousArenaSeason"] = [=[Gets the previous Arena season.]=],
	["GetPvpPowerDamage"] = [=[Returns the effect of PvP Power on damage dealt to players.]=],
	["GetPvpPowerHealing"] = [=[Returns the effect of PvP power on Healing Power.]=],
	["GetPvpTalentInfoByID"] = [=[Returns information about a PvP (honor) talent.]=],
	["GetQuestCurrencyInfo"] = [=[Returns information about a currency token rewarded from the quest currently being viewed in the quest info frame.]=],
	["GetQuestFactionGroup"] = [=[ factionGroup = GetQuestFactionGroup(questID)]=],
	["GetQuestLogRewardCurrencyInfo"] = [=[Provides information about a currency reward for the quest currently being viewed in the quest log, or of the provided questId.]=],
	["GetQuestMoneyToGet"] = [=[Returns amount of money required for quest currently displayed in gossip.]=],
	["GetQuestObjectiveInfo"] = [=[Returns information about a quest objective.]=],
	["GetQuestProgressBarPercent"] = [=[Returns a quest's objective completion percentage.]=],
	["GetQuestText"] = [=[Gets the description of the current quest.]=],
	["GetRFDungeonInfo"] = [=[Returns info about a Raid Finder dungeon by index. Limited by player level and other factors, so only Raid Finder dungeons listed in the LFG tool can be looked up.]=],
	["GetRandomDungeonBestChoice"] = [=[Returns the suggested random dungeon ID.]=],
	["GetRangedHaste"] = [=[Returns the player's ranged haste amount granted through buffs.]=],
	["GetReadyCheckStatus"] = [=[Returns a group member's response to the current ready check.]=],
	["GetReleaseTimeRemaining"] = [=[Returns the amount of time left before your ghost is pulled from your body.]=],
	["GetRepairAllCost"] = [=[ repairAllCost, canRepair = GetRepairAllCost()]=],
	["GetRewardMoney"] = [=[Returns a amount of copper rewarded for completion of quest displayed in gossip.]=],
	["GetRewardTitle"] = [=[Returns the title awarded by the currently displayed quest.]=],
	["GetSavedInstanceChatLink"] = [=[Retrieves the [[SavedInstanceChatLink]] to a specific instance.]=],
	["GetSavedInstanceEncounterInfo"] = [=[Returns info about a specific encounter from a saved instance lockout.]=],
	["GetSavedWorldBossInfo"] = [=[Returns information about the player's [[world boss]] loot lockout.]=],
	["GetScenariosChoiceOrder"] = [=[Returns an ordered list of all available scenario IDs.]=],
	["GetSchoolString"] = [=[Returns the name of the specified damage school mask.]=],
	["GetScreenResolutions"] = [=[Returns a list of available screen resolutions]=],
	["GetScriptCPUUsage"] = [=[Returns the total time used by the scripting system.]=],
	["GetSelectedFaction"] = [=[Returns the row index of the currently selected faction in reputation window.]=],
	["GetShapeshiftFormCooldown"] = [=[Returns cooldown information for a specified [[Form#Macro form numbers|form]].]=],
	["GetShieldBlock"] = [=[Returns the percentage of damage blocked by your shield.]=],
	["GetSpecializationInfoByID"] = [=[Returns information about the specified specialization.]=],
	["GetSpecializationInfoForClassID"] = [=[Returns information about the specified specialization.]=],
	["GetSpecsForSpell"] = [=[Returns the specs for which the specified spell can be used.]=],
	["GetSpellBaseCooldown"] = [=[Gives the (unmodified) cooldown and global cooldown of an ability in milliseconds.]=],
	["GetSpellHitModifier"] = [=[Returns the amount of Spell Hit %, not from Spell Hit Rating, that your character has.]=],
	["GetSpellLossOfControlCooldown"] = [=[Returns information about a loss-of-control cooldown affecting a spell.]=],
	["GetSpellRank"] = [=[Returns recipe rank.]=],
	["GetSpellsForCharacterUpgradeTier"] = [=[For Level Up Display]=],
	["GetTabardCreationCost"] = [=[Returns cost in coppers.]=],
	["GetTalentInfoByID"] = [=[Returns information about a talent.]=],
	["GetTalentLink"] = [=[Returns the talent link.]=],
	["GetTalentTierInfo"] = [=[Returns the column of the selected talent for a given tier.]=],
	["GetTaskInfo"] = [=[Returns information about a [[Quest#Bonus_Objectives|bonus objective]].]=],
	["GetToolTipInfo"] = [=[Returns validity info for a graphics cvar.]=],
	["GetTotemTimeLeft"] = [=[Returns active time remaining (in seconds) before a totem (or ghoul) disappears.]=],
	["GetTradePlayerItemInfo"] = [=[Returns information about a trade item.]=],
	["GetTrainerServiceNumAbilityReq"] = [=[Get the maximum number of requirements that [[API GetTrainerServiceAbilityReq|GetTrainerServiceAbilityReq]] has.]=],
	["GetTrainerServiceSkillLine"] = [=[Gets the name of the skill at the specified line from the current trainer.]=],
	["GetUnitChargedPowerPoints"] = [=[Returns a table of indices for combo points that have been charged. ]=],
	["GetUnitName"] = [=[Returns the name and optionally the realm of the unit.]=],
	["GetWebTicket"] = [=[Requests updated GM ticket status information.]=],
	["GetWorldElapsedTime"] = [=[ unknown, elapsedTime, type = GetWorldElapsedTime(timerID)]=],
	["GiveMasterLoot"] = [=[Assigns an item from the current loot window to a group member, when in Master Looter mode.]=],
	["GuildControlAddRank"] = [=[Add another rank called "name". Only Guildmaster.]=],
	["GuildControlGetNumRanks"] = [=[Returns number of ranks after guild frame open. Any guild member can use this.]=],
	["HasExtraActionBar"] = [=[Returns whether the player currently has an extra action bar/button.]=],
	["HasFullControl"] = [=[Checks whether you have full control over your character (i.e. you are not feared, etc).]=],
	["HasNewMail"] = [=[Returns nil if there is no new mail.]=],
	["HasSendMailItem"] = [=[Returns boolean if item is attached to send mail frame in specified slot.]=],
	["HearthAndResurrectFromArea"] = [=[Resurrects the player, and ports them out of the world PvP zone.]=],
	["InCinematic"] = [=[Returns true during simple in-game cinematics where only the camera moves, like the race intro cinematics.]=],
	["InGuildParty"] = [=[Returns whether or not you are in a guild party.]=],
	["InitiateRolePoll"] = [=[This function starts a role check.]=],
	["InspectUnit"] = [=[Instructs FrameXML to inspect a particular unit (query server; show UI).]=],
	["IsAchievementEligible"] = [=[Indicates whether the specified achievement is eligible to be completed.]=],
	["IsAllowedToUserTeleport"] = [=[Returns whether the player can teleport to/from an LFG instance.]=],
	["IsAltKeyDown"] = [=[Returns true if the alt key is currently depressed.]=],
	["IsArenaTeamCaptain"] = [=[Returns a value based on whether the player is the arena team captain.]=],
	["IsBattlePayItem"] = [=[Returns whether an item was purchased from the in-game store.]=],
	["IsConsumableItem"] = [=[Returns whether an item is consumed when used.]=],
	["IsControlKeyDown"] = [=[Returns true if the control key is currently depressed.]=],
	["IsDressableItem"] = [=[Returns if the item can be shown in the [[Dressing room]].]=],
	["IsDualWielding"] = [=[Returns if your character is [[Dual wield]]ing.]=],
	["IsEquippedItem"] = [=[Determines if an item is equipped.]=],
	["IsFishingLoot"] = [=[This function is only for determining if the loot window is related to fishing.]=],
	["IsGMClient"] = [=[Returns true if the client downloaded has the GM MPQs attached, returns false otherwise.]=],
	["IsHarmfulItem"] = [=[Returns whether an item can be used against hostile units]=],
	["IsHarmfulSpell"] = [=[Returns whether a spell can be used against hostile units]=],
	["IsHelpfulItem"] = [=[Returns whether an item can be used on the player or friendly units]=],
	["IsHelpfulSpell"] = [=[Returns whether an item can be used on the player or friendly units]=],
	["IsInArenaTeam"] = [=[Returns true if you are a member of an arena team.]=],
	["IsInCinematicScene"] = [=[Returns true during in-game cinematics/cutscenes involving NPC actors and scenescripts.]=],
	["IsInsane"] = [=[Used for the Insanity bar]=],
	["IsLFGDungeonJoinable"] = [=[Returns whether you can queue for a particular dungeon]=],
	["IsLeftAltKeyDown"] = [=[Returns true if the left alt key is currently depressed.]=],
	["IsLeftControlKeyDown"] = [=[Returns true if the left control key is currently depressed.]=],
	["IsLeftShiftKeyDown"] = [=[Returns true if the left shift key is currently depressed.]=],
	["IsLoggedIn"] = [=[Returns nil before the PLAYER_LOGIN event has fired, 1 afterwards.]=],
	["IsMouseButtonDown"] = [=[Returns whether a mouse button is being held down.]=],
	["IsOnGlueScreen"] = [=[Returns whether the game is currently showing a GlueXML screen (i.e. no character is logged in).]=],
	["IsOnTournamentRealm"] = [=[Returns true if currently on a tournament realm, nil otherwise.]=],
	["IsPlayerNeutral"] = [=[Returns whether the player is currently neutral (vs Alliance/Horde).]=],
	["IsPlayerSpell"] = [=[Returns whether the player has learned a particular spell.]=],
	["IsRaidMarkerActive"] = [=[Returns whether or not the raid marker specified by index is active.]=],
	["IsRestrictedAccount"] = [=[Returns if the acount has trial account restrictions.]=],
	["IsRightAltKeyDown"] = [=[Returns true if the right alt key is currently depressed.]=],
	["IsRightControlKeyDown"] = [=[Returns true if the right control key is currently depressed.]=],
	["IsRightShiftKeyDown"] = [=[Returns true if the right shift key is currently depressed.]=],
	["IsShiftKeyDown"] = [=[Returns true if the shift key is currently depressed.]=],
	["IsSubmerged"] = [=[Returns whether the player character is submerged in water.]=],
	["IsTrackedAchievement"] = [=[Returns if an achievement is currently being tracked.]=],
	["IsUsableItem"] = [=[Returns usable, noMana.]=],
	["IsUsingFixedTimeStep"] = [=[Whether the UI is updating at a fixed rate independent of the framerate.]=],
	["IsVehicleAimAngleAdjustable"] = [=[Returns 1 if the player can adjust the Aim Angle of the Vehicle.]=],
	["IsVehicleAimPowerAdjustable"] = [=[Returns 1 if the player can adjust the Aim Power of the Vehicle.]=],
	["IsVeteranTrialAccount"] = [=[Returns whether the wow account has no game time.]=],
	["IsWargame"] = [=[Returns whether the player is currently in a [[War Game]].]=],
	["IsXPUserDisabled"] = [=[Returns 1 if the character has disabled experience gain.]=],
	["ItemAddedToArtifact"] = [=[Returns if there is a keystone in the artifact.]=],
	["KBArticle_BeginLoading"] = [=[Starts the article loading process.]=],
	["KBArticle_GetData"] = [=[Returns information about the current article.]=],
	["KBArticle_IsLoaded"] = [=[Returns true if an article is loaded.]=],
	["KBQuery_BeginLoading"] = [=[Starts a query for articles.]=],
	["KBQuery_GetArticleHeaderCount"] = [=[Returns the number of article headers in the current query.]=],
	["KBQuery_GetArticleHeaderData"] = [=[Returns information about an article header of the current query.]=],
	["KBQuery_GetTotalArticleCount"] = [=[Returns the total number of articles that matches the current query.]=],
	["KBQuery_IsLoaded"] = [=[Returns true if a query loaded successfuly.]=],
	["KBSetup_BeginLoading"] = [=[Starts the loading process for the KB start page.]=],
	["KBSetup_GetArticleHeaderCount"] = [=[Returns the number of articles for the current page.]=],
	["KBSetup_GetArticleHeaderData"] = [=[Returns information for an article header.]=],
	["KBSetup_GetCategoryCount"] = [=[Returns the number of categories in the knowledge base.]=],
	["KBSetup_GetCategoryData"] = [=[Returns information about a category.]=],
	["KBSetup_GetLanguageCount"] = [=[Returns the number of languages in the knowledge base.]=],
	["KBSetup_GetLanguageData"] = [=[Returns information about a language.]=],
	["KBSetup_GetSubCategoryCount"] = [=[Returns the number of subcategories for a category.]=],
	["KBSetup_GetSubCategoryData"] = [=[Returns information about a subcategory.]=],
	["KBSetup_GetTotalArticleCount"] = [=[Returns the total number of articles in the knowlege base.]=],
	["KBSetup_IsLoaded"] = [=[Returns true if the knowledge base is loaded successfuly.]=],
	["KBSystem_GetMOTD"] = [=[Returns the server message of the day.]=],
	["KBSystem_GetServerNotice"] = [=[Returns the server notice.]=],
	["KBSystem_GetServerStatus"] = [=[Returns the server status text.]=],
	["LearnPvpTalent"] = [=[Learns the name of a specified pvp talent in a specified tab. ]=],
	["LearnTalent"] = [=[Learns the specified talent. ]=],
	["LearnTalents"] = [=[Learns the talents listed.]=],
	["LootSlotHasItem"] = [=[Returns whether a loot slot contains an item.]=],
	["MouseIsOver"] = [=[Checks whether the mouse is over the frame (or within specified offsets).]=],
	["MovieFrame_PlayMovie"] = [=[Plays a movie.]=],
	["NextView"] = [=[Cycles forward through the five predefined camera positions.]=],
	["OpeningCinematic"] = [=[Shows the opening cinematic for a player's race. Only works as long as the player has earned zero exp.]=],
	["PetAggressiveMode"] = [=[Switches your pet to aggressive mode; does nothing.]=],
	["PickupContainerItem"] = [=[Wildcard function usually called when a player left clicks on a slot in their bags. Functionality includes picking up the item from a specific bag slot, putting the item into a specific bag slot, and applying enchants (including poisons and sharpening stones) to the item in a specific bag slot, except if one of the Modifier Keys is pressed.]=],
	["PickupGuildBankItem"] = [=[Picks up an item from the guild bank.]=],
	["PickupGuildBankMoney"] = [=[Picks up "money" copper from the guild bank.]=],
	["PickupItem"] = [=[Place the item on the cursor.]=],
	["PickupPetSpell"] = [=[Picks up a Combat Pet spell.]=],
	["PickupSpellBookItem"] = [=[Picks up a skill from spellbook so that it can subsequently be placed on an action bar.]=],
	["PickupStablePet"] = [=[Attaches a pet in your stable to your cursor.]=],
	["PickupTalent"] = [=[Grabs the selected talent spell for placement on an action bar.]=],
	["PitchDownStart"] = [=[Begins pitching the camera Downward.]=],
	["PitchDownStop"] = [=[Stops pitching the camera after [[API PitchDownStart|PitchDownStart]]() is called.]=],
	["PitchUpStart"] = [=[Begins pitching the camera Upward.]=],
	["PitchUpStop"] = [=[Stops pitching the camera after [[API PitchUpStart|PitchUpStart]]() is called.]=],
	["PlaceRaidMarker"] = [=[Brings up a targeting circle to place a raid marker in the world.]=],
	["PlayerHasHearthstone"] = [=[Returns the hearthstone ID]=],
	["PlayerHasToy"] = [=[Determines if player has a specific toy in their toybox]=],
	["PortGraveyard"] = [=[Returns the player to the graveyard.]=],
	["PrevView"] = [=[Cycles backward through the five predefined camera positions.]=],
	["PromoteToAssistant"] = [=[Promotes player to assistant status. Requires raid leadership.]=],
	["PurchaseSlot"] = [=[Buys another bank slot if available.]=],
	["QueryCastSequence"] = [=[Returns index, item, spell for the spell/item that will be used next if the cast sequence is executed.]=],
	["QueryGuildBankLog"] = [=[Updates bank log data from the server, called before all transaction functions. "Money tab" is MAX_GUILDBANK_TABS+1.]=],
	["QueryGuildBankTab"] = [=[Updates bank tab data from the server, called before all item functions.]=],
	["QueryGuildEventLog"] = [=[Fetches the guild event list and fires a GUILD_EVENT_LOG_UPDATE event.]=],
	["QuestFlagsPVP"] = [=[Determine if the quest will flag you you for PvP when accepted.]=],
	["QuestPOIGetIconInfo"] = [=[Returns WorldMap POI icon information for the given quest.]=],
	["RegisterStaticConstants"] = [=[Populates the STATIC_CONSTANTS table for [[API GetGMTicketCategories|GetGMTicketCategories]].]=],
	["RemoveTalent"] = [=[Removes the specified talent.]=],
	["ReopenInteraction"] = [=[Reopens the order hall talents interaction.]=],
	["ReportPlayerIsPVPAFK"] = [=[Reports the specified player as AFK in a battleground.]=],
	["RequestArtifactCompletionHistory"] = [=[Queries the server for archeology data. {{api|t=e|RESEARCH_ARTIFACT_HISTORY_READY}} is fired when data is available.]=],
	["RequestRandomBattlegroundInstanceInfo"] = [=[Requests information about battleground rewards.]=],
	["RequestRatedInfo"] = [=[Requests information about the player's rated PvP stats from the server.]=],
	["RequeueSkirmish"] = [=[Requeues for an arena skirmish.]=],
	["ResetCPUUsage"] = [=[Reset all CPU profiling statistics to zero.]=],
	["ResetCursor"] = [=[Resets mouse cursor.]=],
	["ResetTutorials"] = [=[Starts with the first tutorial again]=],
	["ResetView"] = [=[Resets the specified (1-5) predefined camera position to it's default if it was changed using [[API SaveView|SaveView]](index).]=],
	["RespondMailLockSendItem"] = [=[Confirm item wont be refunded, keepItem boolean.]=],
	["ResurrectGetOfferer"] = [=[Returns the name of the person offering to resurrect you.]=],
	["ResurrectHasSickness"] = [=[Appears to be used when accepting a resurrection will give you resurrection sickessness.]=],
	["ResurrectHasTimer"] = [=[Does the player have to wait before accepting a resurrection.]=],
	["ReturnInboxItem"] = [=[Returns to the sender the attached item in the mail message at the specified index.]=],
	["SearchLFGGetJoinedID"] = [=[Returns the currently selected raid ID.]=],
	["SearchLFGGetNumResults"] = [=[Returns how many players listed in raid browser for selected LFG id.]=],
	["SearchLFGGetPartyResults"] = [=[Returns information about the party player listed in raid browser.]=],
	["SearchLFGGetResults"] = [=[Returns information about the player listed in raid browser.]=],
	["SearchLFGJoin"] = [=[Allows a player to join Raid Browser list.]=],
	["SearchLFGLeave"] = [=[Removes yourself from looking through the Raid Browser. Equivalent to selecting "none" in the Raid Browser.]=],
	["SelectActiveQuest"] = [=[Selects an active quest from the NPC (only available after QUEST_GREETING event).]=],
	["SelectAvailableQuest"] = [=[Selects an available quest from the NPC (only available after QUEST_GREETING event).]=],
	["SelectTrainerService"] = [=[Notifies the server that a trainer service has been selected.]=],
	["SetAllowLowLevelRaid"] = [=[Controls whether the current character can join low-level raids.]=],
	["SetBindingItem"] = [=[Sets a binding to use a specified item.]=],
	["SetBindingMacro"] = [=[Sets a binding to click the specified button object.]=],
	["SetChatWindowAlpha"] = [=[Sets the Alpha value(transparency) of ChatFrame<index> (alpha - 0-100)]=],
	["SetChatWindowColor"] = [=[Sets the background color of a a chat window. (r/g/b - 0-255)]=],
	["SetChatWindowDocked"] = [=[Set whether a chat window is docked. (docked - 0/1)]=],
	["SetChatWindowLocked"] = [=[Sets ChatFrame<index> so that it is or is not movable. (locked - 0/1)]=],
	["SetChatWindowName"] = [=[Sets the alpha value of ChatFrame.]=],
	["SetChatWindowShown"] = [=[Shows or Hides ChatFrame<index> depending on value of <shown> (shown - 0/1)]=],
	["SetChatWindowSize"] = [=[Sets the font size of a chat window. (size - default 14)]=],
	["SetCurrentGuildBankTab"] = [=[Select different bank tab in the UI.]=],
	["SetEuropeanNumbers"] = [=[Sets the decimal separator to a comma instead of a dot.]=],
	["SetInWorldUIVisibility"] = [=[Allows nameplates to be shown even while the UI is hidden (with Alt-Z)]=],
	["SetLFGBootVote"] = [=[Responds to a vote-kick.]=],
	["SetLFGRoles"] = [=[Changes the selected roles.]=],
	["SetLootSpecialization"] = [=[Sets the player's loot specialization.]=],
	["SetMacroSpell"] = [=[Changes the spell used for dynamic feedback for a macro. ]=],
	["SetModifiedClick"] = [=[Assigns the given modifier key to the given action.]=],
	["SetOverrideBindingItem"] = [=[Creates an override binding that uses an item when triggered.]=],
	["SetOverrideBindingMacro"] = [=[Creates an override binding that runs a macro.]=],
	["SetOverrideBindingSpell"] = [=[Creates an override binding that casts a spell]=],
	["SetPVPRoles"] = [=[Sets which roles the player is willing to perform in PvP battlegrounds.]=],
	["SetPetStablePaperdoll"] = [=[Sets the paperdoll model in the pet stable to a new player model.]=],
	["SetRaidTargetIcon"] = [=[Sets or resets a raid icon on a unit.]=],
	["SetScreenResolution"] = [=[Returns the index of the current resolution in effect]=],
	["SetSelectedFaction"] = [=[Sets the currently selected faction in reputation window.]=],
	["SetSendMailCOD"] = [=[Make next mail sent using SendMail() COD target for amount.]=],
	["SetSendMailMoney"] = [=[Add money to next mail sent using SendMail().]=],
	["SetTaxiMap"] = [=[Sets the texture to use for the taxi map.]=],
	["SetUIVisibility"] = [=[Hides or shows the entire UI.]=],
	["ShowAccountAchievements"] = [=[Sets whether account-wide achievements are shown to other players.]=],
	["ShowQuestComplete"] = [=[Shows the completion dialog for a complete, auto-completable quest.]=],
	["ShowRepairCursor"] = [=[Puts the cursor in repair mode.]=],
	["SocketContainerItem"] = [=[Consider an item in a container slot for socketing.]=],
	["SocketInventoryItem"] = [=[Considers the item in the inventory slot for socketing.]=],
	["SolveArtifact"] = [=[Solve the [[API SetSelectedArtifact|selected]] artifact.]=],
	["SpellGetVisibilityInfo"] = [=[Checks if the spell should be visible, depending on spellId and raid combat status]=],
	["SpellHasRange"] = [=[Returns true if the specified spell has a ranged effect (i.e. requires a target).]=],
	["SplitGuildBankItem"] = [=[Picks up part of a stack.]=],
	["StartWarGameByName"] = [=[Starts a [[War Game]]. Parameters are <code>playername, area, isTournamentMode</code> but passed as a whitespace delimited string.]=],
	["StopAttack"] = [=[Turns off auto-attack, if currently active.]=],
	["StopMacro"] = [=[Stops the currently executing macro.]=],
	["StopSound"] = [=[Stops playing the specified sound.]=],
	["TakeInboxTextItem"] = [=[Creates a permanent copy of letter (readable "Plain Letter").]=],
	["TargetNearestEnemyPlayer"] = [=[Selects the nearest enemy player as the current target.]=],
	["TargetNearestFriendPlayer"] = [=[Selects the nearest friendly player as the current target.]=],
	["TargetNearestPartyMember"] = [=[Selects the nearest Party member as the current target.]=],
	["TargetNearestRaidMember"] = [=[Selects the nearest Raid member as the current target.]=],
	["TaxiGetDestX"] = [=[Returns the horizontal position of the destination node of a given route to the destination.]=],
	["TaxiGetDestY"] = [=[Returns the vertical position of the destination node of a given route to the destination.]=],
	["TaxiGetSrcX"] = [=[Returns the horizontal position of the source node of a given route to the destination.]=],
	["TaxiGetSrcY"] = [=[Returns the vertical position of the source node of a given route to the destination.]=],
	["TimeoutResurrect"] = [=[Signals the client that an offer to resurrect the player has expired.]=],
	["ToggleFramerate"] = [=[Show/Hide the FPS.]=],
	["TogglePVP"] = [=[Toggles PVP status.]=],
	["TogglePetAutocast"] = [=[Toggles whether the specified pet ability should autocast or not.]=],
	["ToggleSpellAutocast"] = [=[Toggles whether the specified Pet spell should autocast or not.]=],
	["TurnInGuildCharter"] = [=[Founds a guild.]=],
	["UIFrameFadeIn"] = [=[Fades a frame in.]=],
	["UIFrameFadeOut"] = [=[Fades a frame out.]=],
	["UIParentLoadAddOn"] = [=[Loads or Reloads the specified AddOn, and pops up an error message if it fails to load for any reason.]=],
	["UnitAuraSlots"] = [=[Returns an ordered list of auras used with {{api|UnitAuraBySlot()}}]=],
	["UnitBattlePetSpeciesID"] = [=[Returns the battle pet species ID of a specified unit.]=],
	["UnitBuff"] = [=[Shorthand for <code>UnitAura(unit, index, "HELPFUL")</code>]=],
	["UnitChromieTimeID"] = [=[Returns the Timewalking Campaign ID that a specified unit is in.]=],
	["UnitDebuff"] = [=[Shorthand for <code>UnitAura(unit, index, "HARMFUL")</code>]=],
	["UnitFullName"] = [=[Returns the player's (unit's) name and server.]=],
	["UnitInPartyShard"] = [=[Returns true if the specified unit is in the primary phase of the party.]=],
	["UnitInVehicle"] = [=[ inVehicle = UnitInVehicle(target)]=],
	["UnitIsBattlePet"] = [=[Returns if the unit is a battle pet.]=],
	["UnitIsBattlePetCompanion"] = [=[Returns if the unit is a battle pet summoned by a player.]=],
	["UnitIsControlling"] = [=[Returns true if the local player is directly controlling the specified unit.]=],
	["UnitIsCorpse"] = [=[Returns true if the specified unit is a corpse, false otherwise.]=],
	["UnitIsGroupAssistant"] = [=[Returns whether the unit is an assistant in your current group.]=],
	["UnitIsInMyGuild"] = [=[Returns whether the specified unit is in the same guild as the player's character.]=],
	["UnitIsOtherPlayersBattlePet"] = [=[Returns if the unit is a battle pet summoned by another player.]=],
	["UnitIsPVPSanctuary"] = [=[Returns whether the unit is in a PvP sanctuary, and therefore cannot be attacked by other players.]=],
	["UnitIsQuestBoss"] = [=[Returns true if the specified unit is the "boss" (objective) of a kill quest. If true, then the default UI displays a shield with a yellow "!" on it on the unit's unitframe.]=],
	["UnitIsRaidOfficer"] = [=[Returns whether the specified unit is an officer in your raid.]=],
	["UnitIsTapDenied"] = [=[Indicates a mob is no longer eligible for [[tap]].]=],
	["UnitIsWildBattlePet"] = [=[Returns if the unit is a wild battle pet or [[tamer]] battle pet.]=],
	["UnitNameplateShowsWidgetsOnly"] = [=[Returns true if a units' nameplate should appear in a "widgets-only" mode.]=],
	["UnitQuestTrivialLevelRangeScaling"] = [=[Returns the difference between the units' current level and the level at which scaling-level quests are of trivial difficulty.]=],
	["UnitRealmRelationship"] = [=[Returns information about the player's relation to the specified unit's realm.]=],
	["UnitSetRole"] = [=[Sets a unit's role in the group.]=],
	["UnitStagger"] = [=[Returns the amount of staggered damage on the unit.]=],
	["UpdateAddOnCPUUsage"] = [=[Scan through the profiling data and update the per-addon statistics.]=],
	["UpdateAddOnMemoryUsage"] = [=[Scan through memory profiling data and update the per-addon statistics.]=],
	["UseToy"] = [=[Use a toy in player's toybox.]=],
	["UseToyByName"] = [=[Use a toy in player's toybox.]=],
	["VehicleExit"] = [=[Exit the current Vehicle.]=],
	["WithdrawGuildBankMoney"] = [=[Withdraws "money" copper from the guild bank.]=],
	["date"] = [=[Returns the current date according to the user's machine.]=],
	["geterrorhandler"] = [=[Returns the currently set error handler.]=],
	["getprinthandler"] = [=[Returns the function currently handling print() output.]=],
	["message"] = [=[Displays a message box with your text message and an "Okay" button.]=],
	["print"] = [=[Calls the current print output handler with the provided values; by default printing the values to the default chat frame.]=],
	["scrub"] = [=[Returns the argument list with non-number/boolean/string values changed to nil.]=],
	["secureexecuterange"] = [=[Calls a function for each pair within a table without propagating taint to the caller.]=],
	["setprinthandler"] = [=[Changes the function handling print() output.]=],
	["time"] = [=[Returns a timestamp for the specified time or the current Unix time.]=],
}

return t
